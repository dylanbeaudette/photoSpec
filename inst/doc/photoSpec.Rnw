%\VignetteIndexEntry{photoSpec: A photographic spectrophotometer}
%\VignetteIndexEntry{User manual}
%\VignetteDepends{knitr}
%\VignetteKeywords{}
%\VignettePackage{photoSpec}
%\VignetteEngine{knitr::knitr}

%%%% This is a knitr not sweave document.

\documentclass[10pt]{article}
\pagestyle{headings}

\usepackage{mathpazo}
\usepackage{color}
\usepackage{hyperref, url}
\usepackage{graphicx}
\usepackage[margin=2.0cm]{geometry}
\usepackage[version = 3]{mhchem}
\usepackage[parfill]{parskip}
\geometry{letterpaper}

\usepackage[square, comma, numbers, sort&compress]{natbib} % allows grouping of references [1-4, 8]

\usepackage{ccaption} % Stuff to change the format of a figure caption
\captionnamefont{\bfseries\large}
\captiontitlefont{\bfseries\large}
%\renewcommand{\figurename}{Example}

\setlength{\belowcaptionskip}{10pt} % not part of ccaption

\renewcommand*\familydefault{\sfdefault} % Use if the base font of the document is to be sans serif

% You must knit this file with getwd() set to the directory it is in!

%%%%%     End of Configuration Stuff, Mostly     %%%%%

% run a few things in the background for use later
<< SetUp, echo = FALSE, eval = TRUE, results = "hide" >>=

# You must knit this file with getwd() set to the directory it is in!

# R options & configuration:
rm(list = ls())
options(width =  50, show.signif.stars = FALSE)
#if (!file.exists("graphics")) dir.create("graphics")

desc <- packageDescription("photoSpec")
vers <- paste("(Package Version ", desc$Version, ")", sep = "")

# Stuff specifically for knitr:
library("knitr")
Sys.setenv(PATH = paste('/usr/texbin', Sys.getenv('PATH'), sep = ':'))

#bd <- paste(getwd(), "graphics", sep = "/")
opts_chunk$set(out.width = "0.8\\textwidth", fig.align = "center", fig.width = 7, fig.height = 7, cache = TRUE)

# Note: defaults are eval = TRUE, echo = TRUE
@


\title{photoSpec: A photographic spectrophotometer\\
\Sexpr{vers}}
\author{Bryan A. Hanson\\
e-mail: \href{mailto:hanson@depauw.edu}{hanson@depauw.edu}\\
\\
DePauw University\\
Department of Chemistry \& Biochemistry\\
Greencastle Indiana USA\\
\\
\href{http://github.com/bryanhanson/photoSpec}{github.com/bryanhanson/photoSpec}\\
}
\date{\today}

%%%%%     Now we start the document     %%%%%

\begin{document}

\maketitle

*photoSpec is a WORK IN PROGRESS and is pretty crude shape*

Notes for Rd and Vignette of photoSpec

Monitors and printing are technologies.  They have real limitations.  You won't see the same thing when you print the same image using an inkjet printer, a photo printer or a laser printer.  Monitors can be CRT or LCD.  Various types of papers and pigments are available.

light reflected from an object (which depends upon the illuminating light) -> electrical signal from camera detector -> processing for storage -> processing for display OR processing for printing (printer driver, which probably has color management)

Color specifications to software are almost always rgb (grid graphics requires it).  Put another way, displays use some form of rgb as their native language.

Calibrate sample card by adjusting ff so that the palest color is white/invisible.

Importance of reproducible research concepts.

pdf has a colormodel argument.

Work Flow for photoSpec [Generation 1]

Understand the color concepts (plotCIEchrom will be of help).

Determine the wavelength range of interest.  This will correspond to the maximum/plateau of the absorbance vs wavelength plot.

Use selectCIExy() to determine the CIE xy values which cover the wavelengths complementary to the wavelengths of interest.  STATUS: Matt is working on this.

Use showCIEselection() to verify selection. STATUS: Ready for further testing.

The CIE xy values are passed to plotSampleCard() which produces graphical output which can be printed (need to test various media).  The sample card contains calibration paint chips and a place for the sample.  STATUS: Works, but undoubtedly needs improvement.

A sample is placed on the sample card and photographed. The photograph is transferred to the computer as a jpeg.

The jpeg is opened in Inkscape or a similar program.  The hexidecimal code of each paint chip is written down, as is the code for the sample (need a means to average over the sample region). [Generation 2: this process will be automated using image segmentation methods]

The paint chip and sample codes/values are passed to showCalColSpace() which will plot the paint chip values and the sample value.  Determine if the sample value is sufficiently close to the paint chip values (how?).  If not, adjust wavelength range and reprint card, take a new photograph and repeat the calibration check.  STATUS: Works, probably close to done.  If the sample and paint chip values are OK (need to determine exactly how to define that), pass the values to the next function.

Use computeSampleAbs() to find the paint chip value closest to the sample value and interpolate.  Need to set up some kind of quantitative scale.  STATUS: Function works but returns the interpolated color, not a quantitative value.

 

%\begin{flushleft}
%\bibliographystyle{ieeetr} % Cause refs to be numbered and collected in order used
%\addcontentsline{toc}{section}{References}
%\bibliography{image_refs}
%\end{flushleft}

\end{document}
