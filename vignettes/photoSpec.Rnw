%\VignetteIndexEntry{photoSpec: A photographic spectrophotometer}
%\VignetteIndexEntry{User manual}
%\VignetteDepends{knitr, photoSpec, ggplot2}
%\VignetteKeywords{}
%\VignettePackage{photoSpec}
%\VignetteEngine{knitr::knitr}

%%%% This is a knitr not sweave document.

\documentclass{tufte-handout}

\usepackage{graphicx}
\usepackage{hyperref}

\usepackage[version = 3]{mhchem}
\usepackage{xtab}
\usepackage{amssymb}
\usepackage{amsmath}
%\usepackage[buttonsize=1em]{animate}
\usepackage{morefloats}

%%%%% This next section from SO to abbreviate 2nd occurence of a citation

\usepackage{etoolbox}% provides some support for comma-separated lists

%\makeatletter
%% We'll keep track of the old/seen bibkeys here.
%\def\@tufte@old@bibkeys{}
%
%% This macro prints the full citation if it's the first time it's been used
%% and a shorter citation if it's been used before.
%\newcommand{\@tufte@print@margin@citation}[1]{%
%  % print full citation if bibkey is not in the old bibkeys list
%  \ifinlist{#1}{\@tufte@old@bibkeys}{%
%    \citealp{#1}% print short entry
%  }{%
%    \bibentry{#1}% print full entry
%  }%
%  % add bibkey to the old bibkeys list
%  \listgadd{\@tufte@old@bibkeys}{#1}%
%}
%
%% We've modified this Tufte-LaTeX macro to call \@tufte@print@margin@citation
%% instead of \bibentry.
%\renewcommand{\@tufte@normal@cite}[2][0pt]{%
%  % Snag the last bibentry in the list for later comparison
%  \let\@temp@last@bibkey\@empty%
%  \@for\@temp@bibkey:=#2\do{\let\@temp@last@bibkey\@temp@bibkey}%
%  \sidenote[][#1]{%
%    % Loop through all the bibentries, separating them with semicolons and spaces
%    \normalsize\normalfont\@tufte@citation@font%
%    \setcounter{@tufte@num@bibkeys}{0}%
%    \@for\@temp@bibkeyx:=#2\do{%
%      \ifthenelse{\equal{\@temp@last@bibkey}{\@temp@bibkeyx}}{%
%        \ifthenelse{\equal{\value{@tufte@num@bibkeys}}{0}}{}{and\ }%
%        \@tufte@trim@spaces\@temp@bibkeyx% trim spaces around bibkey
%        \@tufte@print@margin@citation{\@temp@bibkeyx}%
%      }{%
%        \@tufte@trim@spaces\@temp@bibkeyx% trim spaces around bibkey
%        \@tufte@print@margin@citation{\@temp@bibkeyx};\space
%      }%
%      \stepcounter{@tufte@num@bibkeys}%
%    }%
%  }%
%}
%
%
%% Calling this macro will reset the list of remembered citations. This is
%% useful if you want to revert to full citations at the beginning of each
%% chapter.
%\newcommand{\resetcitations}{%
%  \gdef\@tufte@old@bibkeys{}%
%}
%\makeatother

%%%%%     End of LaTeX Configuration     %%%%%

%%%%%     Set up R and knitr     %%%%%

<< SetUp, echo = FALSE, warning = FALSE, message = FALSE >>=

# R options & configuration:
rm(list = ls())
options(width =  50, show.signif.stars = FALSE)

desc <- packageDescription("photoSpec")
vers <- paste("package version ", desc$Version, sep = "")
library("photoSpec")
library("knitr")
library("ggplot2")

# Stuff specifically for knitr:

Sys.setenv(PATH = paste('/usr/texbin', Sys.getenv('PATH'), sep = ':'))

opts_chunk$set(out.width = "0.9\\textwidth", fig.align = "center", fig.width = 7, fig.height = 7, cache = TRUE, echo = FALSE, warning = FALSE, message = FALSE, crop = TRUE)
knit_hooks$set(rgl.mov = hook_plot_custom) # use to capture a movie
knit_hooks$set(crop = hook_pdfcrop)

# Note: defaults are eval = TRUE, echo = TRUE
@

\title{photoSpec: A photographic spectrophotometer}
\author{Bryan A. Hanson}
\date{\today}

%\title{photoSpec: A photographic spectrophotometer\\
%\Sexpr{vers}}
%\author{Bryan A. Hanson\\
%e-mail: \href{mailto:hanson@depauw.edu}{hanson@depauw.edu}\\
%\\
%DePauw University\\
%Department of Chemistry \& Biochemistry\\
%Greencastle Indiana USA\\
%\\
%\href{http://github.com/bryanhanson/photoSpec}{github.com/bryanhanson/photoSpec}\\
%}
%\date{\today}

%%%%%     Now we start the document     %%%%%

\begin{document}

\maketitle

\vspace{1 cm}

\section{Status}

\texttt{photoSpec} is a WORK IN PROGRESS.  This manual is based on \Sexpr{vers}.  \texttt{photoSpec} code and installation instructions can be found at Github.\footnote{\href{http://github.com/bryanhanson/photoSpec}{github.com/bryanhanson/photoSpec}}  For bugs and feature requests, please use the issue tracker at Github.  Your comments and suggestions are always welcome.

\section{What is photoSpec?}

\texttt{photoSpec} allows one to apply the concept of Beer's Law to a photograph containing appropriate color swatches (paint chips) and a sample to be analyzed.  The motivation is to provide a method for 'spectrophotometry' of objects that cannot be chemically analyzed because of their value or insolubility.  Functions in the package cover the entire workflow from generating calibration colors to obtaining a quantitative answer analogous to concentration in Beer's Law.\footnote{Mr. Matt Kukurugya proposed the idea of \texttt{photoSpec} to overcome some extraction difficulties encountered in a research project.  I'm not sure I forgive him for leading me down this path.  Matt also wrote the first generation code for several functions.  Ms. Kristina Mulry did most of the field testing of \texttt{photoSpec} and wrote some test functions.  Their contributions were critical to getting \texttt{photoSpec} off the ground.}

As mentioned, the inspiration for \texttt{photoSpec} was a need to analyze objects which could not be readily extracted, in as automated manner as possible, for numerous samples.  In medicine, chemistry and biology there is a long history of using test strips, for instance, for urinalysis or pH measurement.  The small swatches on fancier types of pH paper are basically paint chips which are compared against a printed standard.  With \texttt{photoSpec} we try to carry out such a comparison in a rigorous, automated fashion, using free and open source software.  Very sophisticated commercial systems exist for non-destructive color analysis (quality control) of products, for instance bread loaves exiting an oven on a conveyor belt.\footnote{An excellent example: \href{http://www.verivide.com/start/en/products/digieye}{www.verivide.com/start/en/products/digieye}}  \texttt{photoSpec} obviously cannot compare to such systems.  Rather, \texttt{photoSpec} is geared towards the type of measurements one might make under less-than-ideal conditions.

\section{Purpose of This Manual}

This manual provides a general, non-mathematical introduction to the use of \texttt{photoSpec}, including background on some important color concepts.  A detailed example of the \texttt{photoSpec} work flow is provided.  A separate vignette in development will provide proof of the \texttt{photoSpec} concept, which demonstrates that \texttt{photoSpec} gives answers that are linearly related to reflection and absorbance data.

\section{Background \& Caveats}

In some ways color is quite simple, for instance you might rate certain colors or color combinations more pleasing than others, and choose them for painting a room.  However, on a technical level, all such aesthetic pleasures are out the window: the production and experience of color is quite complex.  Color results from a combination of physical processes coupled with perception by the eyes and brain.  It is important to understand that the human eye can perceive many more colors than electronic devices can reproduce.  Thus, any attempt to generate, quantify or describe color in a practical manner is potentially fraught with difficulties.  These concepts are covered in more detail in the sections that follow.

Monitors, cameras and printing are technologies.  They have real limitations.  You won't see the same thing when you print an image using an inkjet printer, a photo printer or a laser printer.  Monitors can create and display color using several different mechanisms (CRT or LCD, for example).  Various types of papers and pigments are available for printing.  Further, anytime a computer file representing an image is created, it can be created in various formats, and information may be lost or altered during the creation process.  Changing the storage format or printing device can modify the image.  All these things conspire to make the description and reproduction of color on real devices challenging.

\section{Describing Color}

The appearance of a color depends upon the illumination source (e.g sunlight, fluorescent light, a backlit display), the surface (e.g. a smooth wall, a ridged flower petal, gloss vs. matte photos), as well as the 'true' color of the object.  Those, very briefly, are the physical parameters.  But color also depends upon perception via the eyes and brain.\footnote{And your brain can be fooled.  Look up 'simultaneous contrast' and 'successive contrast' for some examples.}  And there is a cultural aspect to color as well.  Zollinger provides a good overall background to color concepts, including chemical, physical, biological and cultural aspects.\cite{Zollinger1999}  Lee's book covers some of the same ground, but is focussed on plants.\cite{Lee2007}  Both are beautiful and interesting books.  For a much more technical treatment, various sources are available.\cite{Hunt2011, Schanda2007}  Finally, there numerous useful documents on the web.  Charles Poynton has some nice resources that have both basic and technical material.\footnote{\href{http://www.poynton.com/notes/colour_and_gamma/}{poynton.com}}

Humans have attempted to describe color in a quantitative way for hundreds of years.  The outcome of these efforts are color spaces.  Color spaces fall into two main categories: color spaces describing human perception, and color spaces for use by devices such as computers and printers.\footnote{A glossary defining selected terms is at the end of this document.  For further information, Wikipedia articles on color are generally pretty helpful.}

\subsection{Human Color Spaces}

Color spaces which describe human perception attempt to quantify all the colors a human being (non-color blind!) can perceive.  These are the colors that might be found in nature, or created by artists working with oils, pastels or crayons for that matter.\footnote{Not everyone can see the extremes, but visible light is generally about 360-780 nm.}  There are a very large number of these colors, far more than any device can reproduce.   The two main systems for describing human color perception are the CIE system and the Munsell system.

\emph{The CIE System}  The CIE system presents humanly-observable colors in a chromaticity diagram in which the $x$ and $y$ coordinates describe the color, and embody the hue (wavelength) and intensity (saturation).  The brightness of the color is an implicit 3rd dimension, which is constant in the chromaticity diagram.  The CIE system was first published in 1931 as a way to systematize color descriptions.  Figure~\ref{fig:CIE_1} shows the chromaticity diagram.  D65 is a standard white point, representing daylight.\footnote{Though it is called a white point, it really means equal amounts of the three primary colors, but the total brightness of the white point may range from white to grey to black.  A better term would be the point of equal energy.}  If you draw a line from D65 to a particular wavelength on the perimeter, colors along that line are all of the same hue (wavelength; called the dominant wavelength in this case) but increasingly saturated as you approach the perimeter.  The CIE system is perceptually non-uniform.  This means that if you start anywhere in the diagram, and move a fixed distance but in different directions, the change in color is not equal.\footnote{\texttt{photoSpec} uses the 1931 CIE diagram.  A revised version appeared in 1976 which was perceptually uniform.  Look it up and you'll see how the shape of the shark fin has changed to make this true.  Compare the green hues with the blue/violets hues.}

<< CIE_1, fig.cap = "The 1931 CIE chromaticity diagram."  >>=
plotCIEchrom(gradient = "sl", title = "", ex = 1.5)
@

This color system is particularly well-suited to thinking spectrophotometrically.  The outer edge is the spectral locus, which is the visible spectrum as seen in a prism.\footnote{Colloquially called the 'shark fin', 'tongue' or 'horseshoe'.  The chromaticity diagram is somewhat like a distorted Maxwell's Triangle or a mashed color wheel.}   Along this line are the most saturated colors possible, and it is calibrated in wavelength.  The 'line of purples' which connects the ends of the spectral locus across the bottom represents the purple hues, which do not exist in the visible spectrum of white light, and hence do not have wavelengths.  

Figure~\ref{fig:CIE_1} is actually a bit of a cheat.  More than half the colors shown are not shown correctly because they are out of gamut.  Figure~\ref{fig:CIE_2} shows the chromaticity diagram restricted to the colors within the sRGB gamut used by most display devices.  The odd-shaped polygon outlines the gamut of a typical CMYK printing device.  Printers provide a slightly different range of colors than most displays.\footnote{These diagrams were created using \texttt{plotCIEchrom()}.}

<< CIE_2, fig.cap = "Chromaticity diagram showing the sRGB and CMYK gamuts." >>=
plotCIEchrom(gradient = getGamutValues("sRGB"), opts = c("SWOP", "sRGB"), title = "", ex = 1.5)
@

Figure~\ref{fig:CIE_3} shows how one can specify two wavelengths in the visible spectrum, and then obtain the CIE $x$ and $y$ values for the complementary wavelengths.  These are the colors the obejct would actually appear.  The figure uses the example of an object or solution with a $\lambda_{max}$ of about 490 nm, then the object or solution would appear red.

<< CIE_3, fig.cap = "Chromaticity diagram showing colors complementary to 490 nm." >>=
selectCIExy(L1 = 489, L2 = 491, title = "", ex = 1.1)
@

\emph{The Munsell System}  The Munsell system is also based upon a rigorous study of human color perception.  The Munsell color space is characterized by three parameters: hue, which describes the wavelength of the color, chroma, which describes the intensity or saturation of the color, and value, which describes the brightness of the color.  A typical color designation in this system would be '5R 6/10' where 5R designates the mid-red hues.  The 6 is the value, that is, the brightness, on a 0...10 scale where 0 is black and 10 is white.  The 10 is the chroma, the intensity of the red color.  These features will be demonstrated momentarily.

The Munsell color space is asymmetric because human perception of color is not even across hues or wavelengths.  Like the CIE system, the Munsell system covers more colors than can be represented by real devices.  Hence, the figures included here do not show all the colors defined in the system, as some are out of gamut.  One reason that the Munsell system is asymmetric is that it is perceptually uniform.  Moving from a chroma of 2 to 4 or 8 to 10 results in the same apparent change in saturation.  Changing the value from 2 to 3 or 6 to 10 changes the lightness similarly.

FIgure~\ref{fig:Munsell_1} shows a horizontal slice through the Munsell solid at value = 5, the middle of the brightness scale.  In this plot, the radius is the chroma, and the angle around the 'circle' is the hue.  The asymmetry of the Munsell system is immediately apparent.  Keep in mind however that many of the Munsell colors are out of gamut, so this diagram does not show all the colors at this value.  The whole set of colors is still asymmetric, but differently asymmetric.

Figure~\ref{fig:Munsell_3} illustrates this asymmetry even better.  It is the same horizontal slice as before, but now at values 1 to 9.  Values 0 and 10 are valid options, but they each consist of a single entry, pure black or pure white, so there is no point in plotting them.  Finally, Figure~\ref{fig:Munsell_2} shows a horizontal slice through the Munsell solid.  On the right side are the red hues, and on the left are the complementary blue-green hues.  The intrinsic asymmetry is also apparent here.

<< Munsell_1, fig.cap = "All in gamut Munsell colors with value = 5" >>=
library("munsell")
print(value_slice(5))
@

<< Munsell_3, fig.cap = "All in gamut Munsell colors with values 1 to 9."  >>=
print(value_slice(1:9))
@

<< Munsell_2, fig.cap = "A horizontal slice of the Munsell solid." >>=
print(complement_slice("5R"))
@

The Munsell system was originally developed around 1905 and was adopted by the USDA for use by soil scientists in the 1930's.  It is well-suited to thinking about colors and matching colors because it is presented as a series of paint chips which most people have experience using.  \texttt{photoSpec} uses the Munsell system 'under the hood' as it is computationally much more straightforward compared to the CIE system, especially with respect to brightness (values in the Munsell system).  

One way of comparing the two systems is to compare the CIE chromaticity diagram to Figure~\ref{fig:Munsell_1}.  The CIE chromaticity diagram assumes a constant brightness, as does the view of the Munsell system in Figure~\ref{fig:Munsell_1}.

<< CIE_4, fig.cap = "Chromaticity diagram with Munsell colors labeled." >>=
plotCIEchrom(gradient = "sl", title = "", ex = 1.5, opts = c("D65", "Munsell"))
@

\subsection{Device Color Spaces}

Color spaces for use by devices are more numerous.  As new technology becomes available, capability and standards evolve, and manufacturers are always seeking to extend the gamut.  Commonly encountered color spaces for devices are RGB, HSV, HSL and CMYK.  Color specifications in software are usually sRGB which has become the standard of choice for many uses. It is also what most displays use, but printers typically use other color spaces.  All color spaces have pros and cons, and it is possible, within limits, to easily convert between them.

%\subsection{Munsell colors in the RGB color space}
%
%Figure~\ref{fig:RGB_1} shows the middle hues of Munsell red, green and blue at all chromas and values, plotted in the RGB color space for comparison.  This figure is a movie which should automatically play in many pdf viewers.
%
%<< RGB_1, rgl.mov = TRUE, fig.ext = 'png', out.width = '3 in', fig.show = 'animate', fig.num = 180, interval = 0.25, aniopts = 'controls, autoplay, loop', echo = FALSE, results = 'hide', fig.cap = "Munsell Hues (middle reds, greens, blues) in the RGB Color Space", warning = FALSE >>=
%
%R <- genCalCols(minHue = "2.5R", maxHue = "7.5R", showCal = FALSE)
%G <- genCalCols(minHue = "2.5G", maxHue = "7.5G", showCal = FALSE)
%B <- genCalCols(minHue = "2.5B", maxHue = "7.5B", showCal = FALSE)
%
%HC <- c(R$hexcol, G$hexcol, B$hexcol)
%COORD <- rbind(R$rgb, G$rgb, B$rgb)
%colnames(COORD) <- c("r", "g", "b")
%COORD <- as.data.frame(COORD)
%
%open3d(windowRect = c(0, 0, 500, 500))
%bg3d("black")
%axes3d(box = TRUE, expand = 0.9, col = "white", lwd = 5)
%points3d(x = 0.0, y = 0.0, z = 0.0, col = "white",
%	size = 5, smooth = FALSE)
%points3d(x = 1.0, y = 1.0, z = 1.0, col = "white",
%	size = 5, smooth = FALSE)
%title3d(xlab = "red", ylab = "green", zlab = "blue", col = "white")
%points3d(COORD, col = HC, size = 5, point_antialias = TRUE)
%	
%par3d(zoom = 1.1) # avoids clipping axis labels while rotating
%M <- par3d("userMatrix")
%
%inc <- pi/90 # 2 degree rotation between frames (in radians)
%
%for (i in 1:180) {
%	M2 <- rotate3d(M, -i*inc, i*inc, 1, 0)
%	par3d(userMatrix = M2)
%	Sys.sleep(0.5)
%	rgl.snapshot(paste(fig_path(i), 'png', sep = '.'))
%	}	
%@
%
%Figure~\ref{fig:RGB_2} shows a wider range of just red hues.  Each 'wing' of color arises from a particular value, with the spread of the wing due to varying hue and chroma.  The calibration 'curve' is also shown in this view.\footnote{You can create this view and interact with it by using \texttt{genCalCols()}.}
%
%<< RGB_2, rgl.mov = TRUE, fig.ext = 'png', out.width = '3 in', fig.show = 'animate', fig.num = 180, interval = 0.25, aniopts = 'controls, autoplay, loop', echo = FALSE, results = 'hide', fig.cap = "Red Munsell hues in the RGB Color Space", warning = FALSE >>=
%
%R <- genCalCols()
%	
%par3d(zoom = 1.1) # avoids clipping axis labels while rotating
%M <- par3d("userMatrix")
%
%inc <- pi/90 # 2 degree rotation between frames (in radians)
%
%for (i in 1:180) {
%	M2 <- rotate3d(M, i*inc,  -i*inc, 1, 0)
%	par3d(userMatrix = M2)
%	Sys.sleep(0.5)
%	rgl.snapshot(paste(fig_path(i), 'png', sep = '.'))
%	}	
%@

\section{What Happens When One Captures An Image}

Keeping in mind the concepts above, a more elaborate description of how an object attains its color in a computer image or print is, at least in part:

\begin{itemize}
	\item Incident light with particular wavelengths reflects off an object, or light passes through the object, or the object emits light.
	\item The object absorbs some wavelengths, and reflects others.  Complicating things, the pigments in some objects can absorb light at one wavelength and emit light at different wavelength (this is flourescence).
	\item The light is captured by a device (a CCD detector or film in a camera) which has limitations.  From this point on, the color has been captured by technology that is much less capable than the human eye, and thus something has been lost.
	\item This data is stored in the camera, probably with some hidden processing, in a format selected via the camera software.
	\item The data may be manipulated purposefully by the photgrapher using a program such as GIMP, iPhoto or Photoshop.
	\item The data may be displayed on a monitor, which has a particular gamut and color management system, or
	\item The data may be printed on some kind of media (plain paper, photo paper) by a printer (inkjet, dye sublimation, laser printer etc).  The device has a driver which uses some kind of color management.
	\item The process repeats: you observe the image of the object under some illumination, and your eyes function as the detector.
\end{itemize}

The key 'take away' here is that many very technical things happen to the color of the object along the way.  When working with \texttt{photoSpec}, as many of these things as possible should be controlled by doing them in a defined, reproducible manner.  You don't necessarily need to understand or know what's going on in the background, but you need to control the conditions.

\section{Measuring Color: Beer's Law \& The Link to photoSpec}

Beer's Law is used in spectrophotometry to quantify the color of solutions:

%\begin{equation}
%A = \epsilon b C = log_{10}T = -log_{10}\frac{I}{I_0}
%\end{equation}

\begin{equation}
A = \epsilon b C
\end{equation}

Where $A$ is the absorbance of the solution, $\epsilon$ is the molar absorbtivity or extinction coefficient, $b$ is the path length through the solution (typically a 1 cm cuvette) and $C$ is the concentration of the absorbing species.\footnote{The units of $C$ and $\epsilon$ vary, but they must cancel with $b$ to give $A$ which is by definition unitless.} When working with Beer's Law, one typically creates a calibration curve using solutions of known concentration.  Then when you measure the absorbance of your samples, you can use the calibration curve to convert absorbance to concentration. Figure~\ref{fig:CalCurve} shows a typical calibration curve.

<< CalCurve, fig.cap = "A typical calibration curve." >>=

conc = seq(1, 12, length.out = 8)
abs = jitter(conc, factor = 2)*0.1
cc <- data.frame(conc, abs)
qplot(x = conc, y = abs, data = cc, geom = c("point", "smooth"), method = "lm", se = FALSE,
	xlab = "concentration", ylab = "absorbance")
@

In the case of \texttt{photoSpec}, $A$ corresponds to the hexadecimal code of the colors (either the calibration colors or the sample colors).  $\epsilon$ and $b$ are captured in the 'slope' of the calibration curve.  $C$ is the projection of the color, now expressed in RGB space, onto the calibration curve (details elsewhere).  Thus, a series of calibration colors can be used to find the calibration curve, and then a new color, the sample color, can be projected onto the calibration curve and a quantitative reading obtained, exactly as one does with Beer's Law.  \texttt{photoSpec} expresses its answers on a scale of 0...1, where 0 represents black, with an absorbance of 0, and 1 represents white, the most intense color that can be represented in any device color space.\footnote{In the Munsell system, all hues taper to the limit of pure black or pure white as their value changes, so both green and red hues end in pure black and white (these are the extreme corners of the RGB colorspace at 0,0,0 and 1,1,1).  See the top and bottom of Fig.~\ref{fig:Munsell_2}}

\section{Work Flow for photoSpec}

\texttt{photoSpec} analyses should always be run using scripts which call the various functions.  This enables fully documented and reproducible research.  Further, the steps that occur outside \texttt{photoSpec} should be standardized and recorded as well.  For instance, the printer, driver settings and type of paper you use to print the sample card should be recorded and used consistently.  The broad steps to use \texttt{photoSpec} are described below.  An detailed example follows in a later section.

\begin{enumerate}

\item Choose the colors you will need for calibration using one of these two methods.  The first method follows naturally from spectroscopic measurements as typically used by chemists and biologists.  The second method is more akin to matching a paint color.
	\begin{enumerate}
		\item Using data from traditional spectrophotometry or the literature, determine the wavelength range of interest. This will correspond to the maximum of the absorbance versus wavelength plot, commonly called $\lambda_{max}$.  Since these peaks generally have a fairly broad plateau, and you will be photographing real objects that presumably have some natural variation in color, you will want to specify a range of at least 10 nm.  As you increase the range, you are specifying more colors for your calibration curve, and these colors will be less pure, but that is probably an advantage.  Use \texttt{selectCIExy()} to show the CIE xy values (and colors) which cover the wavelengths complementary to the wavelengths of interest.  These colors will be the colors of the objects.  You can then use this information to select appropriate Munsell hues, which are the input to \texttt{genCalCols()}.
		\item Use the functions in package \texttt{munsell} to select the hue range which corresponds to your samples.  Don't worry about value and chroma, these default to the full range for the best calibration curve.
	\end{enumerate}

\item Use \texttt{genCalCols()} to generate a set of calibration colors.  Refine as needed to correspond to the range of sample colors you anticipate.  You can view your calibration colors as paint chips or in 3D.  You may have to iterate over several of these steps to make sure you have the right colors before collecting data that matters.

\item Use \texttt{plotSampleCard()} to produce a sample card.  This sample card contains calibration paint chips and a place for the sample.  Print this on the media of your choice (plain paper, photo paper, etc - keep in mind the comments above under Background \& Caveats).

\item A sample is placed on the sample card and photographed. Define and control the lighting context for the best result.  Define and record the camera settings.  Some experimentation with both lighting and camera settings is to be expected.  Export the photograph in jpg/jpeg format.

\item Open the jpeg in GIMP\footnote{GIMP is a free, open-source, multi-platform program for image manipulation.  See \href{http://www.gimp.org}{gimp.org}} and adjust its color so that it is more 'true'.  In spite of your best efforts, the photograph is influenced by lighting conditions and on-camera processing, so the calibration colors you so carefully generated are not 'right' in the photo.  In this step you try to make them as correct as possible.  See the detailed example below.

\item Record the hexadecimal code for each sample on the card.

\item Use \texttt{showCalColSpace()} to check the quality and utility of your calibration curve, and to get your quantitative information about the sample(s).  This function plots the paint chip values and the sample value in interactive, 3D space.  Determine if the sample value is sufficiently close to the paint chip values.\footnote{If not, go back to \texttt{selectCIExy()} or the Munsell chart and adjust the wavelength range and reprint the card, take a new photograph and repeat the calibration check.}  This function calls \texttt{computeSampleAbs()} to create a calibration curve.  This is your final answer and conceptually represents the absorbance of your sample at the given wavelength range.

\end{enumerate}

\section{A Detailed Example}

Let's imagine that you need to quantify the consistency of the red and orange M \& M candy colors.  You could extract the pigments and measure them using classic methods, but the color of these candies might not be captured perfectly using that method, since there is a clear coating on top the pigmented material.  So let's assume you have a bag of the candies and you have set aside all the red and orange candies for analysis.  Let's pretend it is a big bag and you need to analyze about 50 candies.

This more detailed example assumes that you have familiarized yourself with the rest of this vignette, and looked around on the web for more background as needed.  Also, we will not explain the use of the functions and arguments in detail, so please check the help files for more information.

\begin{enumerate}
	\item The first step is to select your calibration colors.  As described above, you have two approaches to this problem.  Which one you use depends upon what you know about your system.
	\begin{enumerate}
		\item Since we are dealing with red and orange hues, if we extracted the pigment the solution would have a $\lambda_{max}$ in the blue range, roughly 400 nm.  If we only knew $\lambda_{max}$, we could use \texttt{selectCIExy()} to determine the color that the sample would appear to us.  Figure~\ref{fig:Ex0} shows the method.  However, in this case, this step way of looking at things is not the best since our eyes already tell us what colors the samples appear.

<< Ex0, fig.cap = "Using the chromaticity diagram to determine the color range of the sample.", echo = TRUE, message = FALSE  >>=
hues <- selectCIExy(L1 = 480, L2 = 490, title = "", ex = 1.1)
@

		 
		\item Since you know the color of your candies, you can look at a Munsell chart and select the hues directly.  Our candies are red and orange, so we can start with the red and yellow-red hues (we'll use all of the subhues for now).

<< Ex1, fig.cap = "First try at candy colors. Obviously the hexadecimal codes for each color don't fit!", echo = TRUE, message = TRUE, warning = TRUE  >>=
candy <- genCalCols(minHue = "2.5R", maxHue = "10YR", showCal = FALSE, plotPC = TRUE)
@

This generates a lot of colors, some of which are clearly too dark or two light for your candies.  However, these extremes are necessary for a good calibration curve, so don't delete them.\footnote{These extremes basically guide the calibration curve smoothly toward pure black or pure white.}  The important thing is that there are paint chips in this collection which are close to the colors you need to analyze.  If not, consider adjusting the hue range.\footnote{Keep in mind that no matter how you are looking at these paint chips, their color is probably not displayed correctly.  Nevertheless, we have to work with what our devices can reproduce.  We have had the best results with printing on photo paper using a CMYK printer.  More later on this.}  In this case we probably have a few paint chips which are too close to the purple end of things, so we could revise our colors as follows.

<< Ex2, fig.cap = "Second set of candy colors, with red hues nearest red-purple removed.", echo = TRUE, message = TRUE, warning = TRUE  >>=
candy <- genCalCols(minHue = "5R", maxHue = "10YR", showCal = FALSE, plotPC = TRUE)
@

This reduces the number of colors somewhat.  Looking at the orange M \& M's, I'm a little worried that this selection of colors doesn't have much in the way of oranges.  But maybe that is an illusion.  We'll continue.
	\end{enumerate}
	
	\item  The next step is to create a sample card.  We need space on the card to place some M \& M's, and of course our calibration colors.  But there are many colors, we'll use every third one.\footnote{The colors on the card mainly serve to help us correct the photo to 'true' color in the next steps.  In an emergency, the colors on the card can be used to try to salvage data.  In the quantitative step in \texttt{photoSpec}, all the colors in your calibration set will be used.  They don't however necessarily all have to be on the sample card.}

<< Ex3, fig.cap = "The sample card.  The reference pure black, pure white and 18 percent gray are boxed.", echo = TRUE, message = TRUE, warning = TRUE  >>=
plotSampleCard(calCols = candy, chip.rep = 0.33, size = c(6, 5), ruler = c(5, 5), title = "Yummy Candies v1")
@
	
This looks pretty good.  We'll keep going.

	\item The next step is to print the card, put the samples on the grid and take the photo.  It is very important to record all the parameters for each step so you can reproduce them.
	
	
		\begin{enumerate}
			\item Print the card.  We print on HP photopaper with matte finish, using a Canon ImageRUNNER ADVANCE printer which uses a CMYK inks.  We have not experimented much with different papers and printers.\footnote{We do know that plain paper is too rough to give a good image with high resolution cameras, as the paper texture and shadows within the texture are readily visible.  If you don't have a printer that does a good enough job, you might try printing on photo paper at a photo kiosk or camera shop.}
			\item Figure out where you are going to take the photo.  We use a framework to support some black felt, and then find a place where the lighting is even, with no shadows.  This appears to be more important than the kind of lighting (daylight, incandescent, fluorescent) because you can compensate for this later.  You can't fix shadows or color casts at all.
			\item Take the photo.  We use a tripod for consistent distances and of course steadiness.  Our camera settings, only slightly optimized, are as follows: Nikon XXX, 50 mm 2.4 lens, RAW format, shutter priority, no flash,  ISO 1600, white balance auto, shutter 1/60th.  Other settings are at default values.
			\item Export the photo to your computer as a jpeg/jpg image.
		\end{enumerate}
		
		
	\item  Process the photo.  Here are the steps we have been using.  Again, these are not necessarily the best, and don't forget to record what you do.  At this point we recommend that the processing be kept to a minimum.
			\begin{enumerate}
			\item  Open original photo in GIMP.\footnote{ \href{http://www.gimp.org}{gimp.org}}
			\item Crop the image to just outside the printed part of the card (Image $\rightarrow$ Crop to selection).  This is an important step, as the next steps will take into account the colors in the entire image.  If you have a lot of extra black or white background, this will strongly influence the results.
			\item   Use the auto white balance tool (Colors $\rightarrow$ Auto $\rightarrow$ White Balance).  Save with OK.
			\item Use the levels tool, specifically the gray, white and black color pickers in that order on the card (Colors $\rightarrow$ Levels\ldots).  Save with OK.  There will generally be more than one set of white/gray/black on your card.  You can experiment to see how much difference you get.  Just be sure to not use the reference colors in any region of the photo that may have a shadow of any kind on it, or an area of discoloration.
			\item  Inspect the results via Tools $\rightarrow$ Color Picker.  Select "Pick only", "Use Info Window", "Sample average" with radius of 10 pixels. Make sure the white is white and the black is black, or at least close.  Repeat the previous step if necessary.  "Save as\ldots" .xcf (the default GIMP extension).
			\item  Using the color picker tool, record the hexadecimal code for the sample(s) using the color picker tool.  Change the color picker radius to average as large of an area as appropriate for your samples.   In \texttt{R}, create a data frame that has the hexadecimal colors and sample id's in rows.
			
<< Ex3a, echo = TRUE  >>=
id <- c("orange1", "red1")
cols <- c("#FFFFFF", "#FFFFFF")
mySamp <- data.frame(id = id, cols = cols)
mySamp
@
			
		\end{enumerate}

	\item Now for the answer.

	\begin{enumerate}
		\item Pass your sample colors to \texttt{showCalColSpace()}:
<< Ex4, fig.cap = "", echo = TRUE, message = TRUE, warning = TRUE, eval = FALSE  >>=
ans <- showCalColSpace(calCols = candy, sampCols = mySamp)
print(ans)
@

	\end{enumerate}
\end{enumerate}
 
\section{Glossary}

\begin{description}
	\item [CCD] Charge Capture Device.  The heart of a digital camera.  A semi-conductor device in which photons (light) are captured and counted and eventually represented to you as an image.
	\item [CIE] Commission Internationale de l'Eclairage, or International Commission on Illumination, the folks who brought you the CIE chromaticity diagram in all its variations.
	\item [CMYK] Cyan, Magenta, Yellow, blacK.  A subtractive color space typically used for printing.
	\item [CRT] Cathode Ray Tube.  Before LCD displays, TVs and computer displays used CRTs.  Ask your parents or look in a junk store.
	\item [color management system] A piece of software and settings by which a particular device determines how to display colors.  Necessary because monitors can be built to different specifications, using different physical and chemical technologies, yet we want red to look red regardless of the manufacturer or technology employed.
	\item [color space] A mathematical attempt to rigorously define colors for technical purposes. Some color spaces are useful for understanding human color perception, others are more useful for chatting with computers.
	\item [device driver] A piece of software which tells a computer how to print something on a given device.  Covers much more than color; the color instructions are generally part of a color management system or profile.
	\item [gamut] The range of colors which can be correctly rendered using a given device/technology.
	\item [hexadecimal code] One format for specifying color.  For example \texttt{\#ffffff} is black. 
	\item [HSL] Hue, Saturation, Lightness.  A cylindrical color space derived from RGB which is easier on the brain.  Popular in 'color pickers'.
	\item [HSV] Hue, Saturation, Value.  A cylindrical color space derived from RGB which is easier on the brain.  Popular in 'color pickers'.
	\item [LCD] Liquid Crystal Display.  A self-luminous display technology, such as that used in laptops, phones and tablets.
	\item [RGB] Red, Green, Blue.  A color space description. The RGB system can run from [0\ldots1] or [0\ldots255] on each of the three channels, red, green and blue.  Black is [0, 0, 0]; white is [1, 1, 1] or [255, 255,  255].  Red would be [1, 0, 0] or [255, 0, 0].
	\item [sRGB] A standardized form of RGB.  The difference has to do mainly with how displays properly convert RGB triplets into a color on the screen.
\end{description}

%\begin{flushleft}
\bibliographystyle{plainnat}
\bibliography{color}
%\end{flushleft}

\end{document}
