library("R.utils")
install.packages("splancs")
library("splancs")
?pdf
?convertColor
x <- c(0.640, 0.300, 0.150)#
		y <- c(0.330, 0.600, 0.060)#
		ans <- data.frame(x, y)
str(ans)
ans <- data.frame(x = 0.3127, y = 0.3920)
ans
getGamutValues <- function(gamut) {#
	if (gamut == "Apple") { #
		x <- c(0.640, 0.300, 0.150)#
		y <- c(0.330, 0.600, 0.060)#
		ans <- data.frame(x, y)#
		}#
	if (gamut == "CIE") { #
		x <- c(0.735, 0.274, 0.167)#
		y <- c(0.265, 0.717, 0.009)#
		ans <- data.frame(x, y)#
		}#
#
	if (gamut == "Adobe") { #
		x <- c(0.640, 0.210, 0.150)#
		y <- c(0.330, 0.600, 0.060)#
		ans <- data.frame(x, y)#
		}#
#
	if (gamut == "sRGB") { #
		x <- c(0.640, 0.300, 0.150)#
		y <- c(0.330, 0.600, 0.060)#
		ans <- data.frame(x, y)#
		}#
#
	if (gamut == "NTSC") { #
		x <- c(0.670, 0.210, 0.140)#
		y <- c(0.330, 0.710, 0.080)#
		ans <- data.frame(x, y)#
		}#
#
	if (gamut == "SWOP") { #
		x <- c(0.205, 0.172, 0.225, 0.430, 0.610, 0.470)#
		y <- c(0.125, 0.226, 0.540, 0.500, 0.320, 0.235)#
		ans <- data.frame(x, y)#
		}#
#
	ans#
	}
getWhiteValues <- function(white) {#
	if (gamut == "D65") ans <- data.frame(x = 0.3127, y = 0.3920)#
	if (gamut == "E") ans <- data.frame(x = 0.333, y = 0.333)#
	if (gamut == "C") ans <- data.frame(x = 0.3101, y = 0.3161)#
	if (gamut == "D50") ans <- data.frame(x = 0.3457, y = 0.3585)#
#
	ans#
	}
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "outlineGamut"), ...) {#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		if ((colSpace != "sRGB") | (colSpace != "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		grid.points(getGamutValues("D65"), gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native") #
		grid.text(0.312, 0.329, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("outlineGamut" %in% opts) {#
		xrgb <- c(0.640, 0.300, 0.150) #
		yrgb <- c(0.330, 0.600, 0.060)#
		grid.polygon(xrgb, yrgb, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "outlineGamut"), ...) {#
	if ((colSpace != "sRGB") | (colSpace != "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		grid.points(getGamutValues("D65"), gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native") #
		grid.text(0.312, 0.329, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("outlineGamut" %in% opts) {#
		xrgb <- c(0.640, 0.300, 0.150) #
		yrgb <- c(0.330, 0.600, 0.060)#
		grid.polygon(xrgb, yrgb, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "outlineGamut"), ...) {#
	if ((colSpace != "sRGB") || (colSpace != "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		grid.points(getGamutValues("D65"), gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native") #
		grid.text(0.312, 0.329, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("outlineGamut" %in% opts) {#
		xrgb <- c(0.640, 0.300, 0.150) #
		yrgb <- c(0.330, 0.600, 0.060)#
		grid.polygon(xrgb, yrgb, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
?Logic
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "outlineGamut"), ...) {#
	if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		grid.points(getGamutValues("D65"), gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native") #
		grid.text(0.312, 0.329, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("outlineGamut" %in% opts) {#
		xrgb <- c(0.640, 0.300, 0.150) #
		yrgb <- c(0.330, 0.600, 0.060)#
		grid.polygon(xrgb, yrgb, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom(colSpace = "sRGB")
?grid.points
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "outlineGamut"), ...) {#
	if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native") #
		grid.text(0.312, 0.329, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("outlineGamut" %in% opts) {#
		xrgb <- c(0.640, 0.300, 0.150) #
		yrgb <- c(0.330, 0.600, 0.060)#
		grid.polygon(xrgb, yrgb, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
?grid.polygon
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom()
plotCIEchrom(opts = c("CMYK", "D65", "E"))
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("SWOP" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom(opts = c("CMYK", "D65"))
plotCIEchrom(opts = c("SWOP", "D65"))
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("SWOP" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Apple" %in% opts) {#
		g <- getGamutValues("Apple")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("NTSC" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Adobe" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("CIE" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	Lxyz <- subset(Lxyz, wavelength <= 650)#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("SWOP" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Apple" %in% opts) {#
		g <- getGamutValues("Apple")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("NTSC" %in% opts) {#
		g <- getGamutValues("NTSC")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Adobe" %in% opts) {#
		g <- getGamutValues("Adobe")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("CIE" %in% opts) {#
		g <- getGamutValues("CIE")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom(opts = c("SWOP", "D65", "CIE", "Adobe"))
findFn("grid legend")
grid.plot.and.legend()
plotCIEchrom <- function(colSpace = "sRGB", gradient = 1, ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
	Lxyz <- loadObject("CVRLxyz.RData")#
	if (gradient == 1) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		insideL <- inout(xyz, Lxyz, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	if (gradient == 2) {#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
#
		xrgb <- c(0.640, 0.300, 0.150)#
		yrgb <- c(0.330, 0.600, 0.060)#
		gamut <- data.frame(x = xrgb, y = yrgb)#
		insideL <- inout(xyz, gamut, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = "sRGB")#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)	#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("SWOP" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Apple" %in% opts) {#
		g <- getGamutValues("Apple")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("NTSC" %in% opts) {#
		g <- getGamutValues("NTSC")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Adobe" %in% opts) {#
		g <- getGamutValues("Adobe")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("CIE" %in% opts) {#
		g <- getGamutValues("CIE")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom(opts = c("D65", "CIE"))
ls()
Lxyz <- loadObject("CVRLxyz.RData")
tail(Lxyz)
xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")
plotCIEchrom <- function(gradient = NULL, colSpace = "sRGB", ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	Lxyz <- loadObject("CVRLxyz.RData")#
	if (!is.null(gradient)) {#
		if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		if (gradient == "sl") {#
			grad <- Lxyz#
			else {#
				grad <- getGamutValue(gradient)#
				}	#
			}#
		insideL <- inout(xyz, grad, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("SWOP" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Apple" %in% opts) {#
		g <- getGamutValues("Apple")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("NTSC" %in% opts) {#
		g <- getGamutValues("NTSC")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Adobe" %in% opts) {#
		g <- getGamutValues("Adobe")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("CIE" %in% opts) {#
		g <- getGamutValues("CIE")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom <- function(gradient = NULL, colSpace = "sRGB", ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	Lxyz <- loadObject("CVRLxyz.RData")#
	if (!is.null(gradient)) {#
		if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		if (gradient == "sl") grad <- Lxyz#
		if (!gradient == "sl") grad <- getGamutValue(gradient)#
		insideL <- inout(xyz, grad, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("SWOP" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Apple" %in% opts) {#
		g <- getGamutValues("Apple")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("NTSC" %in% opts) {#
		g <- getGamutValues("NTSC")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Adobe" %in% opts) {#
		g <- getGamutValues("Adobe")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("CIE" %in% opts) {#
		g <- getGamutValues("CIE")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom(opts = c("D65", "sRGB"), gradient = "sl")
plotCIEchrom <- function(gradient = NULL, colSpace = "sRGB", ff = 1.0,#
	opts = c("D65", "specLocus", "purples", "sRGB"), ...) {#
	Lxyz <- loadObject("CVRLxyz.RData")#
	if (!is.null(gradient)) {#
		if (!(colSpace == "sRGB") || (colSpace == "Apple RGB")) stop("colSpace must be sRGB or Apple RGB")#
		message("I'm painting a beautiful gradient, please give me a moment...")#
		xx <- seq(-0.1, 0.9, 0.002) #
		yy <- seq(0.9, -0.1, -0.002) #
		xyz <- expand.grid(xx,yy)#
		names(xyz) <- c("x", "y")#
		if (gradient == "sl") grad <- Lxyz#
		if (!gradient == "sl") grad <- getGamutValues(gradient)#
		insideL <- inout(xyz, grad, bound = TRUE) #
		outsideL <-!insideL #
		xyz$z <- 1 - xyz$x - xyz$y#
		xyzrgb <- convertColor(xyz, from = "XYZ", to = colSpace)#
		xyzrgb <- xyzrgb*ff#
		xyzrgb[xyzrgb > 1] <- 1.0#
		xyzrgb[outsideL,] <- 1.0 #
		fin <- array(dim = c(length(xx), length(yy), 3))#
		names(fin) <- c("x", "y", "rgb")#
		mr <- matrix(data = xyzrgb[,1], ncol = length(xx), byrow = FALSE)#
		mg <- matrix(data = xyzrgb[,2], ncol = length(xx), byrow = FALSE)#
		mb <- matrix(data = xyzrgb[,3], ncol = length(xx), byrow = FALSE)#
		fin[,,1] <- mr#
		fin[,,2] <- mg#
		fin[,,3] <- mb#
		fin <- aperm(fin, c(2,1,3)) #
		finras <- as.raster(fin)#
		}#
	off <- 0.1 #
	Lxyz$x <- Lxyz$x + off#
	Lxyz$y <- Lxyz$y + off#
	grid.text("1931 CIE Chromaticity Diagram", x = 0.5, y = 0.9,#
		gp = gpar(fontface = "bold", cex = 1.2))#
	grid.text(expression(italic(x)), x = 0.5, y = 0.05)#
	grid.text(expression(italic(y)), x = 0.05, y = 0.5, rot = 90)#
	pushViewport(viewport(width = 0.7, height = 0.7,#
		xscale = c(-0.1, 0.9), yscale = c(-0.1, 0.9)))#
	grid.raster(finras, x = 0.5, y = 0.5, interpolate = FALSE, default.units = "npc")#
	grid.polygon(Lxyz$x, Lxyz$y)#
	grid.rect()#
	tickpos <- seq(0.0, 0.8, by = 0.1)#
	grid.xaxis(at = tickpos)#
	grid.yaxis(at = tickpos)#
	msg <- "Warning: the color gradient appearance\nwill vary with the device, surface\n& incident light used to view it\nand is not likely correct anywhere"#
	grid.text(msg, x = 0.98, y = 0.9, gp = gpar(fontface = "italic", cex = 0.9), just = "right")#
	sl <- c(100, 850, 1100, 1350, 1600, 1850, 2100, 2350, 2600)#
	labs <- c("400 nm  ", "475 nm  ", "500 nm  ", "  525 nm", "  550 nm",#
		"  575 nm", "  600 nm", "  625 nm", "  650 nm")#
	grid.points(x = Lxyz$x[sl], y = Lxyz$y[sl], gp = gpar(col = "black"),#
		size = unit(0.5, "char"), default.units = "npc")#
	grid.text(label = labs, Lxyz$x[sl], Lxyz$y[sl],#
		hjust = c(1, 1, 1, 0, 0, 0, 0, 0, 0),#
		vjust = c(1, 0, 0, 0, 0, 0, 0, 0, 1),#
		gp = gpar(cex = 0.75))#
	if ("D65" %in% opts) {#
		wh <- getGamutValues("D65")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D65", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("D50" %in% opts) {#
		wh <- getGamutValues("D50")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  D50", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("C" %in% opts) {#
		wh <- getGamutValues("C")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  C", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
#
	if ("E" %in% opts) {#
		wh <- getGamutValues("E")#
		grid.points(wh$x, wh$y, gp = gpar(col = "black"),#
			size = unit(0.5, "char"), default.units = "native")#
		grid.text(wh$x, wh$y, label = "  E", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		}#
	if ("sRGB" %in% opts) {#
		g <- getGamutValues("sRGB")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("SWOP" %in% opts) {#
		g <- getGamutValues("SWOP")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Apple" %in% opts) {#
		g <- getGamutValues("Apple")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("NTSC" %in% opts) {#
		g <- getGamutValues("NTSC")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("Adobe" %in% opts) {#
		g <- getGamutValues("Adobe")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
#
	if ("CIE" %in% opts) {#
		g <- getGamutValues("CIE")#
		grid.polygon(g$x, g$y, default.units = "native")#
		}#
	if ("specLocus" %in% opts) {#
		grid.text(0.75, 0.55, label = "spectral\nlocus", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.73, 0.53, 0.61, 0.41, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
		}#
	if ("purples" %in% opts) {#
		grid.text(0.65, 0.05, label = "line of\npurples", just = "left",#
			gp = gpar(cex = 0.75), default.units = "native")#
		grid.segments(0.63, 0.07, 0.5, 0.17, default.units = "native",#
			arrow = arrow(ends = "last", length = unit(0.025, "npc"),#
			angle = 15, type = "closed"))#
#
		}#
#
	}
plotCIEchrom(opts = c("D65", "sRGB"), gradient = "sRGB")
plotCIEchrom(opts = c("D65", "sRGB"), gradient = "Apple")
plotCIEchrom(opts = c("D65", "Adobe"), gradient = "CIE")
plotCIEchrom(opts = c("D65", "Adobe"), gradient = "CIE", ff = 1.3)
?grid.arrange
??grid.arrange
sessionInfo()
install.packages("TSP")
library("TSP")
